// Copyright 2018-2022 CERN
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// In applying this license, CERN does not waive the privileges and immunities
// granted to it by virtue of its status as an Intergovernmental Organization
// or submit itself to any jurisdiction.

// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserMapper is an autogenerated mock type for the UserMapper type
type UserMapper struct {
	mock.Mock
}

type UserMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *UserMapper) EXPECT() *UserMapper_Expecter {
	return &UserMapper_Expecter{mock: &_m.Mock}
}

// RunInBaseScope provides a mock function with given fields: f
func (_m *UserMapper) RunInBaseScope(f func() error) error {
	ret := _m.Called(f)

	if len(ret) == 0 {
		panic("no return value specified for RunInBaseScope")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func() error) error); ok {
		r0 = rf(f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserMapper_RunInBaseScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunInBaseScope'
type UserMapper_RunInBaseScope_Call struct {
	*mock.Call
}

// RunInBaseScope is a helper method to define mock.On call
//   - f func() error
func (_e *UserMapper_Expecter) RunInBaseScope(f interface{}) *UserMapper_RunInBaseScope_Call {
	return &UserMapper_RunInBaseScope_Call{Call: _e.mock.On("RunInBaseScope", f)}
}

func (_c *UserMapper_RunInBaseScope_Call) Run(run func(f func() error)) *UserMapper_RunInBaseScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func() error))
	})
	return _c
}

func (_c *UserMapper_RunInBaseScope_Call) Return(_a0 error) *UserMapper_RunInBaseScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserMapper_RunInBaseScope_Call) RunAndReturn(run func(func() error) error) *UserMapper_RunInBaseScope_Call {
	_c.Call.Return(run)
	return _c
}

// ScopeBase provides a mock function with given fields:
func (_m *UserMapper) ScopeBase() (func() error, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ScopeBase")
	}

	var r0 func() error
	var r1 error
	if rf, ok := ret.Get(0).(func() (func() error, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() func() error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() error)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserMapper_ScopeBase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScopeBase'
type UserMapper_ScopeBase_Call struct {
	*mock.Call
}

// ScopeBase is a helper method to define mock.On call
func (_e *UserMapper_Expecter) ScopeBase() *UserMapper_ScopeBase_Call {
	return &UserMapper_ScopeBase_Call{Call: _e.mock.On("ScopeBase")}
}

func (_c *UserMapper_ScopeBase_Call) Run(run func()) *UserMapper_ScopeBase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserMapper_ScopeBase_Call) Return(_a0 func() error, _a1 error) *UserMapper_ScopeBase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserMapper_ScopeBase_Call) RunAndReturn(run func() (func() error, error)) *UserMapper_ScopeBase_Call {
	_c.Call.Return(run)
	return _c
}

// ScopeUser provides a mock function with given fields: ctx
func (_m *UserMapper) ScopeUser(ctx context.Context) (func() error, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ScopeUser")
	}

	var r0 func() error
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (func() error, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) func() error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() error)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserMapper_ScopeUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScopeUser'
type UserMapper_ScopeUser_Call struct {
	*mock.Call
}

// ScopeUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserMapper_Expecter) ScopeUser(ctx interface{}) *UserMapper_ScopeUser_Call {
	return &UserMapper_ScopeUser_Call{Call: _e.mock.On("ScopeUser", ctx)}
}

func (_c *UserMapper_ScopeUser_Call) Run(run func(ctx context.Context)) *UserMapper_ScopeUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserMapper_ScopeUser_Call) Return(_a0 func() error, _a1 error) *UserMapper_ScopeUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserMapper_ScopeUser_Call) RunAndReturn(run func(context.Context) (func() error, error)) *UserMapper_ScopeUser_Call {
	_c.Call.Return(run)
	return _c
}

// ScopeUserByIds provides a mock function with given fields: uid, gid
func (_m *UserMapper) ScopeUserByIds(uid int, gid int) (func() error, error) {
	ret := _m.Called(uid, gid)

	if len(ret) == 0 {
		panic("no return value specified for ScopeUserByIds")
	}

	var r0 func() error
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (func() error, error)); ok {
		return rf(uid, gid)
	}
	if rf, ok := ret.Get(0).(func(int, int) func() error); ok {
		r0 = rf(uid, gid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() error)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(uid, gid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserMapper_ScopeUserByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScopeUserByIds'
type UserMapper_ScopeUserByIds_Call struct {
	*mock.Call
}

// ScopeUserByIds is a helper method to define mock.On call
//   - uid int
//   - gid int
func (_e *UserMapper_Expecter) ScopeUserByIds(uid interface{}, gid interface{}) *UserMapper_ScopeUserByIds_Call {
	return &UserMapper_ScopeUserByIds_Call{Call: _e.mock.On("ScopeUserByIds", uid, gid)}
}

func (_c *UserMapper_ScopeUserByIds_Call) Run(run func(uid int, gid int)) *UserMapper_ScopeUserByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *UserMapper_ScopeUserByIds_Call) Return(_a0 func() error, _a1 error) *UserMapper_ScopeUserByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserMapper_ScopeUserByIds_Call) RunAndReturn(run func(int, int) (func() error, error)) *UserMapper_ScopeUserByIds_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserMapper creates a new instance of UserMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserMapper {
	mock := &UserMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
